import argparse
import asyncio
import fnmatch
import logging
import os
import re
from contextvars import ContextVar
from pathlib import Path
from urllib.parse import urlsplit

import aiosqlite
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    ErrorEvent,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from dotenv import load_dotenv

CWD = Path.cwd()

load_dotenv()


class NameSpace(argparse.Namespace):
    api_token: str
    owner_id: str
    verbosity: int


parser = argparse.ArgumentParser()
parser.add_argument(
    "-t",
    "--api-token",
    "--token",
    default=os.getenv("API_TOKEN"),
)
parser.add_argument(
    "-O",
    "--owner-id",
    "--owner",
    default=int(os.getenv("OWNER_ID", 0)),
)
parser.add_argument("-v", "--verbosity", action="count", default=0)
args = parser.parse_args(namespace=NameSpace())

logger = logging.getLogger(__name__)
lvl = max(logging.DEBUG, logging.WARNING - logging.DEBUG * args.verbosity)
logger.setLevel(level=lvl)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è contextvars –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
db_connection_ctx: ContextVar[aiosqlite.Connection | None] = ContextVar(
    "db_connection",
    default=None,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=args.api_token)
dp = Dispatcher()


# https://docs.aiogram.dev/en/latest/dispatcher/errors.html
@dp.error()
async def error_handler(event: ErrorEvent):
    logger.error("Error caused by %s", event.exception, exc_info=True)


def read_allowed_hosts() -> list[str]:
    """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    return (CWD / "allowed_hosts.txt").read_text().splitlines()


def check_links(text: str, allowed_hosts: list[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Å—ã–ª–∫–∏."""
    links = re.findall(r"(https?://\S+)", text)
    for link in links:
        sp = urlsplit(link)
        for pat in allowed_hosts:
            if fnmatch.fnmatch(sp.hostname, pat):
                return False
    return True


def owner_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëÅÔ∏è –ö—Ç–æ —ç—Ç–æ?",
                    callback_data=f"whois_{user_id}",
                ),
                InlineKeyboardButton(
                    text="üö´ –ë–∞–Ω",
                    callback_data=f"block_{user_id}",
                ),
            ],
        ]
    )


async def init_db() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã."""
    logger.info("init database")
    connection = await aiosqlite.connect(CWD / "bot.db")
    db_connection_ctx.set(connection)
    await connection.execute(
        """
        CREATE TABLE IF NOT EXISTS message_senders (
            message_id INTEGER PRIMARY KEY,
            sender_id INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """
    )
    await connection.execute(
        """
        CREATE TABLE IF NOT EXISTS user_info (
            user_id INTEGER PRIMARY KEY,
            full_name TEXT,
            username TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """
    )
    await connection.execute(
        """
        CREATE TABLE IF NOT EXISTS banned_users (
            user_id INTEGER PRIMARY KEY,
            banned_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """
    )
    await connection.commit()


async def save_message(message_id: int, sender_id: int) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    connection: aiosqlite.Connection = db_connection_ctx.get()
    await connection.execute(
        "INSERT INTO message_senders (message_id, sender_id) VALUES (?, ?)",
        (message_id, sender_id),
    )
    await connection.commit()


async def save_user_info(user_id: int, full_name: str, username: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    connection: aiosqlite.Connection = db_connection_ctx.get()
    await connection.execute(
        """
        INSERT INTO user_info (user_id, full_name, username)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            full_name=excluded.full_name,
            username=excluded.username,
            updated_at=CURRENT_TIMESTAMP
        """,
        (user_id, full_name, username),
    )
    await connection.commit()


async def get_message_sender(message_id: int) -> int | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è."""
    connection: aiosqlite.Connection = db_connection_ctx.get()
    async with connection.execute(
        "SELECT sender_id FROM message_senders WHERE message_id = ?",
        (message_id,),
    ) as cursor:
        result = await cursor.fetchone()
        return result[0] if result else None


async def get_last_message_sender() -> int | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è."""
    connection: aiosqlite.Connection = db_connection_ctx.get()
    async with connection.execute(
        "SELECT sender_id FROM message_senders ORDER BY ROWID DESC LIMIT 1"
    ) as cursor:
        result = await cursor.fetchone()
        return result[0] if result else None


async def get_user_info(user_id: int) -> tuple[str, str] | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID."""
    connection: aiosqlite.Connection = db_connection_ctx.get()
    async with connection.execute(
        "SELECT full_name, username FROM user_info WHERE user_id = ?",
        (user_id,),
    ) as cursor:
        return await cursor.fetchone()


async def check_user_banned(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    connection: aiosqlite.Connection = db_connection_ctx.get()
    async with connection.execute(
        "SELECT COUNT(*) FROM banned_users WHERE user_id = ?", (user_id,)
    ) as cursor:
        result = await cursor.fetchone()
        return result[0] > 0


@dp.message(Command(commands=["start"]))
async def start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info(f"command /start executed by user id: {message.from_user.id}")
    await message.answer("üëã –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")


@dp.message(lambda message: message.from_user.id != args.owner_id)
async def handle_user_message(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    logger.debug(f"message from user #{message.from_user.id}")
    user_id = message.from_user.id

    if await check_user_banned(user_id):
        await bot.send_message(
            user_id, "üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∞–∫ –∫–∞–∫ –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã."
        )
        return

    # if message.text and not check_links(message.text, read_allowed_hosts()):
    #     await bot.send_message(
    #         user_id, "üö´ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Å—ã–ª–∫–∏."
    #     )
    #     return

    username = message.from_user.username
    full_name = message.from_user.full_name

    await save_user_info(user_id, full_name, username)

    keyboard = owner_keyboard(user_id)
    result = await bot.copy_message(
        args.owner_id,
        from_chat_id=message.chat.id,
        message_id=message.message_id,
        reply_markup=keyboard,
    )
    await save_message(result.message_id, user_id)
    await bot.send_message(
        args.owner_id,
        f"_–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {full_name}_",
        reply_to_message_id=result.message_id,
        parse_mode="markdown",
    )
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞.")


@dp.message(lambda message: message.from_user.id == args.owner_id)
async def handle_owner_message(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""

    sender_id = None
    if message.reply_to_message:
        sender_id = await get_message_sender(
            message.reply_to_message.message_id
        )
    else:
        sender_id = await get_last_message_sender()

    logger.debug(f"reply to sender: {sender_id}")

    if sender_id:
        await bot.copy_message(
            sender_id,
            from_chat_id=message.chat.id,
            message_id=message.message_id,
        )
    else:
        await message.reply(
            "‚ùó –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )


@dp.callback_query(lambda c: c.data.startswith("block_"))
async def block_user(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(callback.data.split("_")[1])
    if user_id:
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        connection: aiosqlite.Connection = db_connection_ctx.get()
        await connection.execute(
            "INSERT INTO banned_users (user_id) VALUES (?) ON CONFLICT DO NOTHING",
            (user_id,),
        )
        await connection.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        full_name, username = user_info if user_info else (None, None)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=f"unblock_{user_id}",
                    )
                ],
            ]
        )
        await callback.message.answer(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=keyboard,
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(user_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await callback.message.answer(
            "‚ùó –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )


@dp.callback_query(lambda c: c.data.startswith("unblock_"))
async def unblock_user(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(callback.data.split("_")[1])

    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    connection: aiosqlite.Connection = db_connection_ctx.get()

    await connection.execute(
        "DELETE FROM banned_users WHERE user_id = ?", (user_id,)
    )
    await connection.commit()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await get_user_info(user_id)
    full_name, username = user_info if user_info else (None, None)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    await callback.message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    await bot.send_message(
        user_id, "‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞."
    )


@dp.callback_query(lambda c: c.data.startswith("whois_"))
async def whois(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    user_id = int(callback.data.split("_")[-1])
    if user_id:
        user_info = await get_user_info(user_id)
        if user_info:
            full_name, username = user_info
            await callback.message.answer(
                (
                    "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
                    f"ID:  #{user_id}\n"
                    f"–ù–∏–∫: @{username}\n"
                    f"–ò–º—è: {full_name}"
                )
            )
        else:
            await callback.message.answer(
                "‚ùó –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
            )
    else:
        await callback.message.answer(
            "‚ùó –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."
        )


async def run() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.WARNING)
    asyncio.run(run())
